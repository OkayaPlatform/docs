import { OpenAPIV3_1 } from 'openapi-types';
import type { ContentSchema, DataSchemaArray, Endpoint, ExampleSchema, HttpMethod, ResponseSchema } from './types/endpoint.js';
export declare const generateMessage: (path: string[], messages?: string[]) => string;
export declare class InvalidSchemaError extends Error {
    constructor(path: string[], ...messages: string[]);
}
export declare class ImpossibleSchemaError extends Error {
    constructor(path: string[], ...messages: string[]);
}
export declare class ConversionError extends Error {
    constructor(path: string[], ...messages: string[]);
}
export declare const convertContent: (path: string[], content: Record<string, OpenAPIV3_1.MediaTypeObject> | undefined, required?: boolean) => Record<string, ContentSchema>;
export declare const convertExamples: (examples: Record<string, OpenAPIV3_1.ExampleObject> | undefined, example: unknown | undefined, schemaArray: DataSchemaArray) => Record<string, ExampleSchema>;
export declare const convertResponses: (path: string[], responses: OpenAPIV3_1.ResponsesObject) => ResponseSchema;
export declare const convertOpenAPIV3_1ToEndpoint: (spec: OpenAPIV3_1.Document, path: string, method: HttpMethod) => Endpoint | undefined;
