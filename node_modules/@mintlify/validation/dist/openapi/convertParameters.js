import { InvalidSchemaError } from './convertOpenApi.js';
import { convertSchema, copyKeyIfDefined } from './convertSchema.js';
export const convertParameters = ({ path, method, pathParameters, operationParameters, }) => {
    const parameterSections = {
        path: {},
        query: {},
        header: {},
        cookie: {},
    };
    pathParameters === null || pathParameters === void 0 ? void 0 : pathParameters.forEach((parameterObject, i) => {
        addParameter({
            path: [...path, 'parameters', i.toString()],
            parameter: parameterObject,
            parameterSections,
        });
    });
    operationParameters === null || operationParameters === void 0 ? void 0 : operationParameters.forEach((parameterObject, i) => {
        addParameter({
            path: [...path, method, 'parameters', i.toString()],
            parameter: parameterObject,
            parameterSections,
        });
    });
    return parameterSections;
};
const addParameter = ({ path, parameter, parameterSections }) => {
    if (!['path', 'header', 'query', 'cookie'].includes(parameter.in)) {
        throw new InvalidSchemaError(path, `invalid parameter location: '${parameter.in}'`);
    }
    const location = parameter.in;
    // parameter.schema may be undefined (if the schema is instead defined in parameter.content), but this is likely super rare
    const parameterSchema = parameter.schema;
    copyKeyIfDefined('description', parameter, parameterSchema);
    copyKeyIfDefined('deprecated', parameter, parameterSchema);
    const newParameter = convertSchema([...path, 'schema'], parameter.schema, location === 'path' ? true : parameter.required);
    parameterSections[location][parameter.name] = { schema: newParameter };
};
