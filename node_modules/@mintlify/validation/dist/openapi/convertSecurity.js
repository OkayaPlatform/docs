import { InvalidSchemaError } from './convertOpenApi.js';
import { copyKeyIfDefined } from './convertSchema.js';
export const convertSecurity = ({ securityRequirements, securitySchemes, }) => {
    if (securityRequirements === undefined || securityRequirements.length === 0) {
        return [];
    }
    if (securitySchemes === undefined) {
        throw new InvalidSchemaError(['#', 'components'], 'securitySchemes not defined');
    }
    // TODO(ronan): make this work for camel-case as well
    return securityRequirements.map((security) => {
        const title = Object.keys(security)
            .map((securityName) => securityName.replace(/[_-]/g, ' '))
            .join(' & ');
        const parameterSections = {
            query: {},
            header: {},
            cookie: {},
        };
        Object.keys(security).forEach((securityName) => {
            const securityScheme = securitySchemes === null || securitySchemes === void 0 ? void 0 : securitySchemes[securityName];
            if (securityScheme === undefined) {
                throw new InvalidSchemaError(['#', 'components', 'securitySchemes'], `security scheme not defined: '${securityName}'`);
            }
            addSecurityParameters({
                securityName,
                securityScheme,
                parameterSections,
            });
        });
        return {
            title,
            parameters: parameterSections,
        };
    });
};
export const addSecurityParameters = ({ securityName, securityScheme, parameterSections, }) => {
    switch (securityScheme.type) {
        case 'apiKey': {
            if (!['header', 'query', 'cookie'].includes(securityScheme.in)) {
                throw new InvalidSchemaError(['#', 'components', 'securitySchemes', securityName], `invalid security scheme location provided: '${securityScheme.in}'`);
            }
            const paramGroup = securityScheme.in;
            const schema = { type: 'apiKey' };
            copyKeyIfDefined('description', securityScheme, schema);
            parameterSections[paramGroup][securityScheme.name] = schema;
            return;
        }
        case 'http': {
            const scheme = securityScheme.scheme;
            if (scheme === 'basic' || scheme === 'bearer') {
                const schema = {
                    type: 'http',
                    scheme,
                };
                copyKeyIfDefined('description', securityScheme, schema);
                parameterSections.header['Authorization'] = schema;
            }
            else {
                throw new InvalidSchemaError(['#', 'components', 'securitySchemes', securityName], `encountered unknown HTTP security scheme: '${securityScheme.scheme}'`);
            }
            return;
        }
        case 'oauth2': {
            const schema = { type: 'oauth2' };
            copyKeyIfDefined('description', securityScheme, schema);
            parameterSections.header['Authorization'] = schema;
            return;
        }
        case 'openIdConnect': {
            return;
        }
    }
};
